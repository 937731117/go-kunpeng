// protoc --go_out=plugins=grpc:. cache_activity.proto
// protoc --grpc-gateway_out=logtostderr=true:. cache_activity.proto
// protoc --swagger_out=logtostderr=true:. cache_activity.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: cache_activity.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CacheActivityRecordResponseCode int32

const (
	// 成功
	CacheActivityRecordResponseCode_SUCCESS CacheActivityRecordResponseCode = 0
	// 部分成功
	CacheActivityRecordResponseCode_PARTIAL_SUCCESS CacheActivityRecordResponseCode = 1
	// 失败
	CacheActivityRecordResponseCode_FAIL CacheActivityRecordResponseCode = 2
)

// Enum value maps for CacheActivityRecordResponseCode.
var (
	CacheActivityRecordResponseCode_name = map[int32]string{
		0: "SUCCESS",
		1: "PARTIAL_SUCCESS",
		2: "FAIL",
	}
	CacheActivityRecordResponseCode_value = map[string]int32{
		"SUCCESS":         0,
		"PARTIAL_SUCCESS": 1,
		"FAIL":            2,
	}
)

func (x CacheActivityRecordResponseCode) Enum() *CacheActivityRecordResponseCode {
	p := new(CacheActivityRecordResponseCode)
	*p = x
	return p
}

func (x CacheActivityRecordResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheActivityRecordResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_activity_proto_enumTypes[0].Descriptor()
}

func (CacheActivityRecordResponseCode) Type() protoreflect.EnumType {
	return &file_cache_activity_proto_enumTypes[0]
}

func (x CacheActivityRecordResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheActivityRecordResponseCode.Descriptor instead.
func (CacheActivityRecordResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_cache_activity_proto_rawDescGZIP(), []int{0}
}

type CacheSingleUserActivityRecordRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CacheSingleUserActivityRecordRequest) Reset() {
	*x = CacheSingleUserActivityRecordRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_activity_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSingleUserActivityRecordRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSingleUserActivityRecordRequest) ProtoMessage() {}

func (x *CacheSingleUserActivityRecordRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cache_activity_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSingleUserActivityRecordRequest.ProtoReflect.Descriptor instead.
func (*CacheSingleUserActivityRecordRequest) Descriptor() ([]byte, []int) {
	return file_cache_activity_proto_rawDescGZIP(), []int{0}
}

func (x *CacheSingleUserActivityRecordRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CacheSingleUserActivityRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CacheActivityRecordResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=api.CacheActivityRecordResponseCode" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CacheSingleUserActivityRecordResponse) Reset() {
	*x = CacheSingleUserActivityRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_activity_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSingleUserActivityRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSingleUserActivityRecordResponse) ProtoMessage() {}

func (x *CacheSingleUserActivityRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cache_activity_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSingleUserActivityRecordResponse.ProtoReflect.Descriptor instead.
func (*CacheSingleUserActivityRecordResponse) Descriptor() ([]byte, []int) {
	return file_cache_activity_proto_rawDescGZIP(), []int{1}
}

func (x *CacheSingleUserActivityRecordResponse) GetCode() CacheActivityRecordResponseCode {
	if x != nil {
		return x.Code
	}
	return CacheActivityRecordResponseCode_SUCCESS
}

func (x *CacheSingleUserActivityRecordResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CacheMultiSingleUserActivityRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CacheActivityRecordResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=api.CacheActivityRecordResponseCode" json:"code,omitempty"`
	Msg  string                          `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	// msg仅当错误时会出现
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CacheMultiSingleUserActivityRecordResponse) Reset() {
	*x = CacheMultiSingleUserActivityRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_activity_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheMultiSingleUserActivityRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheMultiSingleUserActivityRecordResponse) ProtoMessage() {}

func (x *CacheMultiSingleUserActivityRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cache_activity_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheMultiSingleUserActivityRecordResponse.ProtoReflect.Descriptor instead.
func (*CacheMultiSingleUserActivityRecordResponse) Descriptor() ([]byte, []int) {
	return file_cache_activity_proto_rawDescGZIP(), []int{2}
}

func (x *CacheMultiSingleUserActivityRecordResponse) GetCode() CacheActivityRecordResponseCode {
	if x != nil {
		return x.Code
	}
	return CacheActivityRecordResponseCode_SUCCESS
}

func (x *CacheMultiSingleUserActivityRecordResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CacheMultiSingleUserActivityRecordResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CacheUserActivityRecordByGradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade string `protobuf:"bytes,1,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (x *CacheUserActivityRecordByGradeRequest) Reset() {
	*x = CacheUserActivityRecordByGradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_activity_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheUserActivityRecordByGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheUserActivityRecordByGradeRequest) ProtoMessage() {}

func (x *CacheUserActivityRecordByGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cache_activity_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheUserActivityRecordByGradeRequest.ProtoReflect.Descriptor instead.
func (*CacheUserActivityRecordByGradeRequest) Descriptor() ([]byte, []int) {
	return file_cache_activity_proto_rawDescGZIP(), []int{3}
}

func (x *CacheUserActivityRecordByGradeRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

type CacheUserActivityRecordByClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class string `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *CacheUserActivityRecordByClassRequest) Reset() {
	*x = CacheUserActivityRecordByClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_activity_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheUserActivityRecordByClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheUserActivityRecordByClassRequest) ProtoMessage() {}

func (x *CacheUserActivityRecordByClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cache_activity_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheUserActivityRecordByClassRequest.ProtoReflect.Descriptor instead.
func (*CacheUserActivityRecordByClassRequest) Descriptor() ([]byte, []int) {
	return file_cache_activity_proto_rawDescGZIP(), []int{4}
}

func (x *CacheUserActivityRecordByClassRequest) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

type MultiCacheUserActivityRecordResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CacheActivityRecordResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=api.CacheActivityRecordResponseCode" json:"code,omitempty"`
	// 请注意, 如code并非PARTITAL_SUCCESS, 不会返回successCount
	SuccessCount int32 `protobuf:"varint,2,opt,name=successCount,proto3" json:"successCount,omitempty"`
}

func (x *MultiCacheUserActivityRecordResponse) Reset() {
	*x = MultiCacheUserActivityRecordResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_activity_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCacheUserActivityRecordResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCacheUserActivityRecordResponse) ProtoMessage() {}

func (x *MultiCacheUserActivityRecordResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cache_activity_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCacheUserActivityRecordResponse.ProtoReflect.Descriptor instead.
func (*MultiCacheUserActivityRecordResponse) Descriptor() ([]byte, []int) {
	return file_cache_activity_proto_rawDescGZIP(), []int{5}
}

func (x *MultiCacheUserActivityRecordResponse) GetCode() CacheActivityRecordResponseCode {
	if x != nil {
		return x.Code
	}
	return CacheActivityRecordResponseCode_SUCCESS
}

func (x *MultiCacheUserActivityRecordResponse) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

var File_cache_activity_proto protoreflect.FileDescriptor

var file_cache_activity_proto_rawDesc = []byte{
	0x0a, 0x14, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f,
	0x67, 0x6c, 0x65, 0x2f, 0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x73, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x3e, 0x0a, 0x24, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16,
	0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x73, 0x0a, 0x25, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74,
	0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43,
	0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67,
	0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x22, 0x90, 0x01, 0x0a, 0x2a,
	0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f,
	0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04,
	0x63, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x03, 0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x3d,
	0x0a, 0x25, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x22, 0x3d, 0x0a,
	0x25, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x84, 0x01, 0x0a,
	0x24, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x38, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x22, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x2a, 0x4d, 0x0a, 0x1f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53,
	0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c,
	0x10, 0x02, 0x32, 0x9a, 0x07, 0x0a, 0x13, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0xa0, 0x01, 0x0a, 0x1d, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63,
	0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x2e, 0x61,
	0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x28, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x22, 0x1a, 0x1d, 0x2f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x84, 0x01,
	0x0a, 0x22, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x6e, 0x67,
	0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x12, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a,
	0x2f, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69,
	0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x28, 0x01, 0x30, 0x01, 0x12, 0xa0, 0x01, 0x0a, 0x1e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73,
	0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64,
	0x42, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65, 0x71, 0x75,
	0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79,
	0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x27,
	0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x1a, 0x1c, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x61,
	0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x67,
	0x72, 0x61, 0x64, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0xa0, 0x01, 0x0a, 0x1e, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x2a, 0x2e, 0x61, 0x70, 0x69,
	0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69,
	0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x22, 0x27, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x21, 0x1a, 0x1c, 0x2f, 0x63, 0x61, 0x63, 0x68,
	0x65, 0x2f, 0x61, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72,
	0x64, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3a, 0x01, 0x2a, 0x12, 0x86, 0x01, 0x0a, 0x1a, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x69, 0x74, 0x79, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67,
	0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74,
	0x79, 0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65,
	0x63, 0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x25, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x1f, 0x1a, 0x1a, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x61, 0x6c, 0x6c,
	0x3a, 0x01, 0x2a, 0x12, 0x89, 0x01, 0x0a, 0x20, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c,
	0x6c, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x29, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x41, 0x63, 0x74, 0x69, 0x76, 0x69, 0x74, 0x79, 0x52, 0x65, 0x63,
	0x6f, 0x72, 0x64, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x22, 0x82, 0xd3, 0xe4,
	0x93, 0x02, 0x1c, 0x2a, 0x1a, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x69, 0x74, 0x79, 0x2d, 0x72, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2f, 0x61, 0x6c, 0x6c, 0x42,
	0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cache_activity_proto_rawDescOnce sync.Once
	file_cache_activity_proto_rawDescData = file_cache_activity_proto_rawDesc
)

func file_cache_activity_proto_rawDescGZIP() []byte {
	file_cache_activity_proto_rawDescOnce.Do(func() {
		file_cache_activity_proto_rawDescData = protoimpl.X.CompressGZIP(file_cache_activity_proto_rawDescData)
	})
	return file_cache_activity_proto_rawDescData
}

var file_cache_activity_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cache_activity_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cache_activity_proto_goTypes = []interface{}{
	(CacheActivityRecordResponseCode)(0),               // 0: api.CacheActivityRecordResponseCode
	(*CacheSingleUserActivityRecordRequest)(nil),       // 1: api.CacheSingleUserActivityRecordRequest
	(*CacheSingleUserActivityRecordResponse)(nil),      // 2: api.CacheSingleUserActivityRecordResponse
	(*CacheMultiSingleUserActivityRecordResponse)(nil), // 3: api.CacheMultiSingleUserActivityRecordResponse
	(*CacheUserActivityRecordByGradeRequest)(nil),      // 4: api.CacheUserActivityRecordByGradeRequest
	(*CacheUserActivityRecordByClassRequest)(nil),      // 5: api.CacheUserActivityRecordByClassRequest
	(*MultiCacheUserActivityRecordResponse)(nil),       // 6: api.MultiCacheUserActivityRecordResponse
	(*empty.Empty)(nil),                                // 7: google.protobuf.Empty
}
var file_cache_activity_proto_depIdxs = []int32{
	0, // 0: api.CacheSingleUserActivityRecordResponse.code:type_name -> api.CacheActivityRecordResponseCode
	0, // 1: api.CacheMultiSingleUserActivityRecordResponse.code:type_name -> api.CacheActivityRecordResponseCode
	0, // 2: api.MultiCacheUserActivityRecordResponse.code:type_name -> api.CacheActivityRecordResponseCode
	1, // 3: api.CacheActivityRecord.CacheSingleUserActivityRecord:input_type -> api.CacheSingleUserActivityRecordRequest
	1, // 4: api.CacheActivityRecord.CacheMultiSingleUserActivityRecord:input_type -> api.CacheSingleUserActivityRecordRequest
	4, // 5: api.CacheActivityRecord.CacheUserActivityRecordByGrade:input_type -> api.CacheUserActivityRecordByGradeRequest
	5, // 6: api.CacheActivityRecord.CacheUserActivityRecordByClass:input_type -> api.CacheUserActivityRecordByClassRequest
	7, // 7: api.CacheActivityRecord.CacheAllUserActivityRecord:input_type -> google.protobuf.Empty
	7, // 8: api.CacheActivityRecord.RemoveAllUserActivityRecordCache:input_type -> google.protobuf.Empty
	2, // 9: api.CacheActivityRecord.CacheSingleUserActivityRecord:output_type -> api.CacheSingleUserActivityRecordResponse
	3, // 10: api.CacheActivityRecord.CacheMultiSingleUserActivityRecord:output_type -> api.CacheMultiSingleUserActivityRecordResponse
	6, // 11: api.CacheActivityRecord.CacheUserActivityRecordByGrade:output_type -> api.MultiCacheUserActivityRecordResponse
	6, // 12: api.CacheActivityRecord.CacheUserActivityRecordByClass:output_type -> api.MultiCacheUserActivityRecordResponse
	6, // 13: api.CacheActivityRecord.CacheAllUserActivityRecord:output_type -> api.MultiCacheUserActivityRecordResponse
	6, // 14: api.CacheActivityRecord.RemoveAllUserActivityRecordCache:output_type -> api.MultiCacheUserActivityRecordResponse
	9, // [9:15] is the sub-list for method output_type
	3, // [3:9] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_cache_activity_proto_init() }
func file_cache_activity_proto_init() {
	if File_cache_activity_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cache_activity_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSingleUserActivityRecordRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_activity_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSingleUserActivityRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_activity_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheMultiSingleUserActivityRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_activity_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheUserActivityRecordByGradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_activity_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheUserActivityRecordByClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_activity_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCacheUserActivityRecordResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cache_activity_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cache_activity_proto_goTypes,
		DependencyIndexes: file_cache_activity_proto_depIdxs,
		EnumInfos:         file_cache_activity_proto_enumTypes,
		MessageInfos:      file_cache_activity_proto_msgTypes,
	}.Build()
	File_cache_activity_proto = out.File
	file_cache_activity_proto_rawDesc = nil
	file_cache_activity_proto_goTypes = nil
	file_cache_activity_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CacheActivityRecordClient is the client API for CacheActivityRecord service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CacheActivityRecordClient interface {
	// 缓存同一用户的全部activity record, 禁止多次调用此rpc, 需要cache多个用户时, 必须使用CacheMultiSingleUserActivityRecord
	CacheSingleUserActivityRecord(ctx context.Context, in *CacheSingleUserActivityRecordRequest, opts ...grpc.CallOption) (*CacheSingleUserActivityRecordResponse, error)
	// 缓存多个单用户的activity record
	CacheMultiSingleUserActivityRecord(ctx context.Context, opts ...grpc.CallOption) (CacheActivityRecord_CacheMultiSingleUserActivityRecordClient, error)
	// 以年级为关键字缓存activity record
	CacheUserActivityRecordByGrade(ctx context.Context, in *CacheUserActivityRecordByGradeRequest, opts ...grpc.CallOption) (*MultiCacheUserActivityRecordResponse, error)
	// 以班级为关键字缓存activity record
	CacheUserActivityRecordByClass(ctx context.Context, in *CacheUserActivityRecordByClassRequest, opts ...grpc.CallOption) (*MultiCacheUserActivityRecordResponse, error)
	// 缓存全部用户的activity record, 调用此rpc请注意Redis内存占用
	CacheAllUserActivityRecord(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultiCacheUserActivityRecordResponse, error)
	// 删除全部用户的activity record
	RemoveAllUserActivityRecordCache(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultiCacheUserActivityRecordResponse, error)
}

type cacheActivityRecordClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheActivityRecordClient(cc grpc.ClientConnInterface) CacheActivityRecordClient {
	return &cacheActivityRecordClient{cc}
}

func (c *cacheActivityRecordClient) CacheSingleUserActivityRecord(ctx context.Context, in *CacheSingleUserActivityRecordRequest, opts ...grpc.CallOption) (*CacheSingleUserActivityRecordResponse, error) {
	out := new(CacheSingleUserActivityRecordResponse)
	err := c.cc.Invoke(ctx, "/api.CacheActivityRecord/CacheSingleUserActivityRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheActivityRecordClient) CacheMultiSingleUserActivityRecord(ctx context.Context, opts ...grpc.CallOption) (CacheActivityRecord_CacheMultiSingleUserActivityRecordClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CacheActivityRecord_serviceDesc.Streams[0], "/api.CacheActivityRecord/CacheMultiSingleUserActivityRecord", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheActivityRecordCacheMultiSingleUserActivityRecordClient{stream}
	return x, nil
}

type CacheActivityRecord_CacheMultiSingleUserActivityRecordClient interface {
	Send(*CacheSingleUserActivityRecordRequest) error
	Recv() (*CacheMultiSingleUserActivityRecordResponse, error)
	grpc.ClientStream
}

type cacheActivityRecordCacheMultiSingleUserActivityRecordClient struct {
	grpc.ClientStream
}

func (x *cacheActivityRecordCacheMultiSingleUserActivityRecordClient) Send(m *CacheSingleUserActivityRecordRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheActivityRecordCacheMultiSingleUserActivityRecordClient) Recv() (*CacheMultiSingleUserActivityRecordResponse, error) {
	m := new(CacheMultiSingleUserActivityRecordResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheActivityRecordClient) CacheUserActivityRecordByGrade(ctx context.Context, in *CacheUserActivityRecordByGradeRequest, opts ...grpc.CallOption) (*MultiCacheUserActivityRecordResponse, error) {
	out := new(MultiCacheUserActivityRecordResponse)
	err := c.cc.Invoke(ctx, "/api.CacheActivityRecord/CacheUserActivityRecordByGrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheActivityRecordClient) CacheUserActivityRecordByClass(ctx context.Context, in *CacheUserActivityRecordByClassRequest, opts ...grpc.CallOption) (*MultiCacheUserActivityRecordResponse, error) {
	out := new(MultiCacheUserActivityRecordResponse)
	err := c.cc.Invoke(ctx, "/api.CacheActivityRecord/CacheUserActivityRecordByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheActivityRecordClient) CacheAllUserActivityRecord(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultiCacheUserActivityRecordResponse, error) {
	out := new(MultiCacheUserActivityRecordResponse)
	err := c.cc.Invoke(ctx, "/api.CacheActivityRecord/CacheAllUserActivityRecord", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheActivityRecordClient) RemoveAllUserActivityRecordCache(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultiCacheUserActivityRecordResponse, error) {
	out := new(MultiCacheUserActivityRecordResponse)
	err := c.cc.Invoke(ctx, "/api.CacheActivityRecord/RemoveAllUserActivityRecordCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheActivityRecordServer is the server API for CacheActivityRecord service.
type CacheActivityRecordServer interface {
	// 缓存同一用户的全部activity record, 禁止多次调用此rpc, 需要cache多个用户时, 必须使用CacheMultiSingleUserActivityRecord
	CacheSingleUserActivityRecord(context.Context, *CacheSingleUserActivityRecordRequest) (*CacheSingleUserActivityRecordResponse, error)
	// 缓存多个单用户的activity record
	CacheMultiSingleUserActivityRecord(CacheActivityRecord_CacheMultiSingleUserActivityRecordServer) error
	// 以年级为关键字缓存activity record
	CacheUserActivityRecordByGrade(context.Context, *CacheUserActivityRecordByGradeRequest) (*MultiCacheUserActivityRecordResponse, error)
	// 以班级为关键字缓存activity record
	CacheUserActivityRecordByClass(context.Context, *CacheUserActivityRecordByClassRequest) (*MultiCacheUserActivityRecordResponse, error)
	// 缓存全部用户的activity record, 调用此rpc请注意Redis内存占用
	CacheAllUserActivityRecord(context.Context, *empty.Empty) (*MultiCacheUserActivityRecordResponse, error)
	// 删除全部用户的activity record
	RemoveAllUserActivityRecordCache(context.Context, *empty.Empty) (*MultiCacheUserActivityRecordResponse, error)
}

// UnimplementedCacheActivityRecordServer can be embedded to have forward compatible implementations.
type UnimplementedCacheActivityRecordServer struct {
}

func (*UnimplementedCacheActivityRecordServer) CacheSingleUserActivityRecord(context.Context, *CacheSingleUserActivityRecordRequest) (*CacheSingleUserActivityRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheSingleUserActivityRecord not implemented")
}
func (*UnimplementedCacheActivityRecordServer) CacheMultiSingleUserActivityRecord(CacheActivityRecord_CacheMultiSingleUserActivityRecordServer) error {
	return status.Errorf(codes.Unimplemented, "method CacheMultiSingleUserActivityRecord not implemented")
}
func (*UnimplementedCacheActivityRecordServer) CacheUserActivityRecordByGrade(context.Context, *CacheUserActivityRecordByGradeRequest) (*MultiCacheUserActivityRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheUserActivityRecordByGrade not implemented")
}
func (*UnimplementedCacheActivityRecordServer) CacheUserActivityRecordByClass(context.Context, *CacheUserActivityRecordByClassRequest) (*MultiCacheUserActivityRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheUserActivityRecordByClass not implemented")
}
func (*UnimplementedCacheActivityRecordServer) CacheAllUserActivityRecord(context.Context, *empty.Empty) (*MultiCacheUserActivityRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheAllUserActivityRecord not implemented")
}
func (*UnimplementedCacheActivityRecordServer) RemoveAllUserActivityRecordCache(context.Context, *empty.Empty) (*MultiCacheUserActivityRecordResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllUserActivityRecordCache not implemented")
}

func RegisterCacheActivityRecordServer(s *grpc.Server, srv CacheActivityRecordServer) {
	s.RegisterService(&_CacheActivityRecord_serviceDesc, srv)
}

func _CacheActivityRecord_CacheSingleUserActivityRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheSingleUserActivityRecordRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheActivityRecordServer).CacheSingleUserActivityRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CacheActivityRecord/CacheSingleUserActivityRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheActivityRecordServer).CacheSingleUserActivityRecord(ctx, req.(*CacheSingleUserActivityRecordRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheActivityRecord_CacheMultiSingleUserActivityRecord_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheActivityRecordServer).CacheMultiSingleUserActivityRecord(&cacheActivityRecordCacheMultiSingleUserActivityRecordServer{stream})
}

type CacheActivityRecord_CacheMultiSingleUserActivityRecordServer interface {
	Send(*CacheMultiSingleUserActivityRecordResponse) error
	Recv() (*CacheSingleUserActivityRecordRequest, error)
	grpc.ServerStream
}

type cacheActivityRecordCacheMultiSingleUserActivityRecordServer struct {
	grpc.ServerStream
}

func (x *cacheActivityRecordCacheMultiSingleUserActivityRecordServer) Send(m *CacheMultiSingleUserActivityRecordResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheActivityRecordCacheMultiSingleUserActivityRecordServer) Recv() (*CacheSingleUserActivityRecordRequest, error) {
	m := new(CacheSingleUserActivityRecordRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CacheActivityRecord_CacheUserActivityRecordByGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheUserActivityRecordByGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheActivityRecordServer).CacheUserActivityRecordByGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CacheActivityRecord/CacheUserActivityRecordByGrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheActivityRecordServer).CacheUserActivityRecordByGrade(ctx, req.(*CacheUserActivityRecordByGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheActivityRecord_CacheUserActivityRecordByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheUserActivityRecordByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheActivityRecordServer).CacheUserActivityRecordByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CacheActivityRecord/CacheUserActivityRecordByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheActivityRecordServer).CacheUserActivityRecordByClass(ctx, req.(*CacheUserActivityRecordByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheActivityRecord_CacheAllUserActivityRecord_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheActivityRecordServer).CacheAllUserActivityRecord(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CacheActivityRecord/CacheAllUserActivityRecord",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheActivityRecordServer).CacheAllUserActivityRecord(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheActivityRecord_RemoveAllUserActivityRecordCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheActivityRecordServer).RemoveAllUserActivityRecordCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CacheActivityRecord/RemoveAllUserActivityRecordCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheActivityRecordServer).RemoveAllUserActivityRecordCache(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CacheActivityRecord_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CacheActivityRecord",
	HandlerType: (*CacheActivityRecordServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CacheSingleUserActivityRecord",
			Handler:    _CacheActivityRecord_CacheSingleUserActivityRecord_Handler,
		},
		{
			MethodName: "CacheUserActivityRecordByGrade",
			Handler:    _CacheActivityRecord_CacheUserActivityRecordByGrade_Handler,
		},
		{
			MethodName: "CacheUserActivityRecordByClass",
			Handler:    _CacheActivityRecord_CacheUserActivityRecordByClass_Handler,
		},
		{
			MethodName: "CacheAllUserActivityRecord",
			Handler:    _CacheActivityRecord_CacheAllUserActivityRecord_Handler,
		},
		{
			MethodName: "RemoveAllUserActivityRecordCache",
			Handler:    _CacheActivityRecord_RemoveAllUserActivityRecordCache_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CacheMultiSingleUserActivityRecord",
			Handler:       _CacheActivityRecord_CacheMultiSingleUserActivityRecord_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cache_activity.proto",
}
