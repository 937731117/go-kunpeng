// protoc --go_out=plugins=grpc:. cache_user.proto
// protoc --grpc-gateway_out=logtostderr=true:. cache_user.proto

// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.25.0
// 	protoc        v3.11.4
// source: cache_user.proto

package api

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	_ "google.golang.org/genproto/googleapis/api/annotations"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type CacheUserResponseCode int32

const (
	// 成功
	CacheUserResponseCode_SUCCESS CacheUserResponseCode = 0
	// 部分成功
	CacheUserResponseCode_PARTIAL_SUCCESS CacheUserResponseCode = 1
	// 失败
	CacheUserResponseCode_FAIL CacheUserResponseCode = 2
)

// Enum value maps for CacheUserResponseCode.
var (
	CacheUserResponseCode_name = map[int32]string{
		0: "SUCCESS",
		1: "PARTIAL_SUCCESS",
		2: "FAIL",
	}
	CacheUserResponseCode_value = map[string]int32{
		"SUCCESS":         0,
		"PARTIAL_SUCCESS": 1,
		"FAIL":            2,
	}
)

func (x CacheUserResponseCode) Enum() *CacheUserResponseCode {
	p := new(CacheUserResponseCode)
	*p = x
	return p
}

func (x CacheUserResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (CacheUserResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_cache_user_proto_enumTypes[0].Descriptor()
}

func (CacheUserResponseCode) Type() protoreflect.EnumType {
	return &file_cache_user_proto_enumTypes[0]
}

func (x CacheUserResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use CacheUserResponseCode.Descriptor instead.
func (CacheUserResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_cache_user_proto_rawDescGZIP(), []int{0}
}

type CacheSingleUserRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	UserId string `protobuf:"bytes,1,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CacheSingleUserRequest) Reset() {
	*x = CacheSingleUserRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_user_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSingleUserRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSingleUserRequest) ProtoMessage() {}

func (x *CacheSingleUserRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cache_user_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSingleUserRequest.ProtoReflect.Descriptor instead.
func (*CacheSingleUserRequest) Descriptor() ([]byte, []int) {
	return file_cache_user_proto_rawDescGZIP(), []int{0}
}

func (x *CacheSingleUserRequest) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type CacheSingleUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CacheUserResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=api.CacheUserResponseCode" json:"code,omitempty"`
	Msg  string                `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
}

func (x *CacheSingleUserResponse) Reset() {
	*x = CacheSingleUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_user_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheSingleUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheSingleUserResponse) ProtoMessage() {}

func (x *CacheSingleUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cache_user_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheSingleUserResponse.ProtoReflect.Descriptor instead.
func (*CacheSingleUserResponse) Descriptor() ([]byte, []int) {
	return file_cache_user_proto_rawDescGZIP(), []int{1}
}

func (x *CacheSingleUserResponse) GetCode() CacheUserResponseCode {
	if x != nil {
		return x.Code
	}
	return CacheUserResponseCode_SUCCESS
}

func (x *CacheSingleUserResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

type CacheMultiSingleUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CacheUserResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=api.CacheUserResponseCode" json:"code,omitempty"`
	// msg仅当错误时会出现
	Msg    string `protobuf:"bytes,2,opt,name=msg,proto3" json:"msg,omitempty"`
	UserId string `protobuf:"bytes,3,opt,name=userId,proto3" json:"userId,omitempty"`
}

func (x *CacheMultiSingleUserResponse) Reset() {
	*x = CacheMultiSingleUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_user_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheMultiSingleUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheMultiSingleUserResponse) ProtoMessage() {}

func (x *CacheMultiSingleUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cache_user_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheMultiSingleUserResponse.ProtoReflect.Descriptor instead.
func (*CacheMultiSingleUserResponse) Descriptor() ([]byte, []int) {
	return file_cache_user_proto_rawDescGZIP(), []int{2}
}

func (x *CacheMultiSingleUserResponse) GetCode() CacheUserResponseCode {
	if x != nil {
		return x.Code
	}
	return CacheUserResponseCode_SUCCESS
}

func (x *CacheMultiSingleUserResponse) GetMsg() string {
	if x != nil {
		return x.Msg
	}
	return ""
}

func (x *CacheMultiSingleUserResponse) GetUserId() string {
	if x != nil {
		return x.UserId
	}
	return ""
}

type MultiCacheUserResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code CacheUserResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=api.CacheUserResponseCode" json:"code,omitempty"`
	// 请注意, 如code并非PARTITAL_SUCCESS, 不会返回successCount
	SuccessCount int32 `protobuf:"varint,2,opt,name=successCount,proto3" json:"successCount,omitempty"`
}

func (x *MultiCacheUserResponse) Reset() {
	*x = MultiCacheUserResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_user_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MultiCacheUserResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MultiCacheUserResponse) ProtoMessage() {}

func (x *MultiCacheUserResponse) ProtoReflect() protoreflect.Message {
	mi := &file_cache_user_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MultiCacheUserResponse.ProtoReflect.Descriptor instead.
func (*MultiCacheUserResponse) Descriptor() ([]byte, []int) {
	return file_cache_user_proto_rawDescGZIP(), []int{3}
}

func (x *MultiCacheUserResponse) GetCode() CacheUserResponseCode {
	if x != nil {
		return x.Code
	}
	return CacheUserResponseCode_SUCCESS
}

func (x *MultiCacheUserResponse) GetSuccessCount() int32 {
	if x != nil {
		return x.SuccessCount
	}
	return 0
}

type CacheUserByClassRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Class string `protobuf:"bytes,1,opt,name=class,proto3" json:"class,omitempty"`
}

func (x *CacheUserByClassRequest) Reset() {
	*x = CacheUserByClassRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_user_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheUserByClassRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheUserByClassRequest) ProtoMessage() {}

func (x *CacheUserByClassRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cache_user_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheUserByClassRequest.ProtoReflect.Descriptor instead.
func (*CacheUserByClassRequest) Descriptor() ([]byte, []int) {
	return file_cache_user_proto_rawDescGZIP(), []int{4}
}

func (x *CacheUserByClassRequest) GetClass() string {
	if x != nil {
		return x.Class
	}
	return ""
}

type CacheUserByGradeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Grade string `protobuf:"bytes,1,opt,name=grade,proto3" json:"grade,omitempty"`
}

func (x *CacheUserByGradeRequest) Reset() {
	*x = CacheUserByGradeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_cache_user_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *CacheUserByGradeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*CacheUserByGradeRequest) ProtoMessage() {}

func (x *CacheUserByGradeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_cache_user_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use CacheUserByGradeRequest.ProtoReflect.Descriptor instead.
func (*CacheUserByGradeRequest) Descriptor() ([]byte, []int) {
	return file_cache_user_proto_rawDescGZIP(), []int{5}
}

func (x *CacheUserByGradeRequest) GetGrade() string {
	if x != nil {
		return x.Grade
	}
	return ""
}

var File_cache_user_proto protoreflect.FileDescriptor

var file_cache_user_proto_rawDesc = []byte{
	0x0a, 0x10, 0x63, 0x61, 0x63, 0x68, 0x65, 0x5f, 0x75, 0x73, 0x65, 0x72, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x12, 0x03, 0x61, 0x70, 0x69, 0x1a, 0x1c, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f,
	0x61, 0x70, 0x69, 0x2f, 0x61, 0x6e, 0x6e, 0x6f, 0x74, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x73, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a, 0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x22, 0x30, 0x0a, 0x16, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06,
	0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73,
	0x65, 0x72, 0x49, 0x64, 0x22, 0x5b, 0x0a, 0x17, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12,
	0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e,
	0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12,
	0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x6d, 0x73,
	0x67, 0x22, 0x78, 0x0a, 0x1c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64,
	0x65, 0x12, 0x10, 0x0a, 0x03, 0x6d, 0x73, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03,
	0x6d, 0x73, 0x67, 0x12, 0x16, 0x0a, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x06, 0x75, 0x73, 0x65, 0x72, 0x49, 0x64, 0x22, 0x6c, 0x0a, 0x16, 0x4d,
	0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x2e, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1a, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x52,
	0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73, 0x73,
	0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x75, 0x63,
	0x63, 0x65, 0x73, 0x73, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x22, 0x2f, 0x0a, 0x17, 0x43, 0x61, 0x63,
	0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52, 0x65, 0x71,
	0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x05, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x22, 0x2f, 0x0a, 0x17, 0x43, 0x61,
	0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x52, 0x65,
	0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x67, 0x72, 0x61, 0x64, 0x65, 0x2a, 0x43, 0x0a, 0x15, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10,
	0x00, 0x12, 0x13, 0x0a, 0x0f, 0x50, 0x41, 0x52, 0x54, 0x49, 0x41, 0x4c, 0x5f, 0x53, 0x55, 0x43,
	0x43, 0x45, 0x53, 0x53, 0x10, 0x01, 0x12, 0x08, 0x0a, 0x04, 0x46, 0x41, 0x49, 0x4c, 0x10, 0x02,
	0x32, 0xf3, 0x04, 0x0a, 0x09, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x12, 0x6b,
	0x0a, 0x0f, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x6e,
	0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1c,
	0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1d, 0x82, 0xd3,
	0xe4, 0x93, 0x02, 0x17, 0x1a, 0x12, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x75, 0x73, 0x65,
	0x72, 0x2f, 0x73, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x3a, 0x01, 0x2a, 0x12, 0x5a, 0x0a, 0x14, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55,
	0x73, 0x65, 0x72, 0x12, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x53,
	0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x1a, 0x21, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x4d, 0x75, 0x6c, 0x74,
	0x69, 0x53, 0x69, 0x6e, 0x67, 0x6c, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x28, 0x01, 0x30, 0x01, 0x12, 0x6b, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65,
	0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x47, 0x72, 0x61, 0x64, 0x65, 0x12, 0x1c, 0x2e, 0x61, 0x70,
	0x69, 0x2e, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x47, 0x72, 0x61,
	0x64, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x11,
	0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x67, 0x72, 0x61, 0x64,
	0x65, 0x3a, 0x01, 0x2a, 0x12, 0x6b, 0x0a, 0x10, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65,
	0x72, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x12, 0x1c, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x43,
	0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x42, 0x79, 0x43, 0x6c, 0x61, 0x73, 0x73, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c,
	0x74, 0x69, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x22, 0x1c, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x16, 0x1a, 0x11, 0x2f, 0x63, 0x61,
	0x63, 0x68, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x63, 0x6c, 0x61, 0x73, 0x73, 0x3a, 0x01,
	0x2a, 0x12, 0x5f, 0x0a, 0x0c, 0x43, 0x61, 0x63, 0x68, 0x65, 0x41, 0x6c, 0x6c, 0x55, 0x73, 0x65,
	0x72, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e,
	0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x63, 0x68, 0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x1a, 0x82, 0xd3, 0xe4, 0x93, 0x02, 0x14, 0x1a, 0x0f,
	0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x75, 0x73, 0x65, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x3a,
	0x01, 0x2a, 0x12, 0x62, 0x0a, 0x12, 0x52, 0x65, 0x6d, 0x6f, 0x76, 0x65, 0x41, 0x6c, 0x6c, 0x55,
	0x73, 0x65, 0x72, 0x43, 0x61, 0x63, 0x68, 0x65, 0x12, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c,
	0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79,
	0x1a, 0x1b, 0x2e, 0x61, 0x70, 0x69, 0x2e, 0x4d, 0x75, 0x6c, 0x74, 0x69, 0x43, 0x61, 0x63, 0x68,
	0x65, 0x55, 0x73, 0x65, 0x72, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x17, 0x82,
	0xd3, 0xe4, 0x93, 0x02, 0x11, 0x2a, 0x0f, 0x2f, 0x63, 0x61, 0x63, 0x68, 0x65, 0x2f, 0x75, 0x73,
	0x65, 0x72, 0x2f, 0x61, 0x6c, 0x6c, 0x42, 0x07, 0x5a, 0x05, 0x2e, 0x3b, 0x61, 0x70, 0x69, 0x62,
	0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_cache_user_proto_rawDescOnce sync.Once
	file_cache_user_proto_rawDescData = file_cache_user_proto_rawDesc
)

func file_cache_user_proto_rawDescGZIP() []byte {
	file_cache_user_proto_rawDescOnce.Do(func() {
		file_cache_user_proto_rawDescData = protoimpl.X.CompressGZIP(file_cache_user_proto_rawDescData)
	})
	return file_cache_user_proto_rawDescData
}

var file_cache_user_proto_enumTypes = make([]protoimpl.EnumInfo, 1)
var file_cache_user_proto_msgTypes = make([]protoimpl.MessageInfo, 6)
var file_cache_user_proto_goTypes = []interface{}{
	(CacheUserResponseCode)(0),           // 0: api.CacheUserResponseCode
	(*CacheSingleUserRequest)(nil),       // 1: api.CacheSingleUserRequest
	(*CacheSingleUserResponse)(nil),      // 2: api.CacheSingleUserResponse
	(*CacheMultiSingleUserResponse)(nil), // 3: api.CacheMultiSingleUserResponse
	(*MultiCacheUserResponse)(nil),       // 4: api.MultiCacheUserResponse
	(*CacheUserByClassRequest)(nil),      // 5: api.CacheUserByClassRequest
	(*CacheUserByGradeRequest)(nil),      // 6: api.CacheUserByGradeRequest
	(*empty.Empty)(nil),                  // 7: google.protobuf.Empty
}
var file_cache_user_proto_depIdxs = []int32{
	0, // 0: api.CacheSingleUserResponse.code:type_name -> api.CacheUserResponseCode
	0, // 1: api.CacheMultiSingleUserResponse.code:type_name -> api.CacheUserResponseCode
	0, // 2: api.MultiCacheUserResponse.code:type_name -> api.CacheUserResponseCode
	1, // 3: api.CacheUser.CacheSingleUser:input_type -> api.CacheSingleUserRequest
	1, // 4: api.CacheUser.CacheMultiSingleUser:input_type -> api.CacheSingleUserRequest
	6, // 5: api.CacheUser.CacheUserByGrade:input_type -> api.CacheUserByGradeRequest
	5, // 6: api.CacheUser.CacheUserByClass:input_type -> api.CacheUserByClassRequest
	7, // 7: api.CacheUser.CacheAllUser:input_type -> google.protobuf.Empty
	7, // 8: api.CacheUser.RemoveAllUserCache:input_type -> google.protobuf.Empty
	2, // 9: api.CacheUser.CacheSingleUser:output_type -> api.CacheSingleUserResponse
	3, // 10: api.CacheUser.CacheMultiSingleUser:output_type -> api.CacheMultiSingleUserResponse
	4, // 11: api.CacheUser.CacheUserByGrade:output_type -> api.MultiCacheUserResponse
	4, // 12: api.CacheUser.CacheUserByClass:output_type -> api.MultiCacheUserResponse
	4, // 13: api.CacheUser.CacheAllUser:output_type -> api.MultiCacheUserResponse
	4, // 14: api.CacheUser.RemoveAllUserCache:output_type -> api.MultiCacheUserResponse
	9, // [9:15] is the sub-list for method output_type
	3, // [3:9] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_cache_user_proto_init() }
func file_cache_user_proto_init() {
	if File_cache_user_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_cache_user_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSingleUserRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_user_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheSingleUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_user_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheMultiSingleUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_user_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MultiCacheUserResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_user_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheUserByClassRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_cache_user_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*CacheUserByGradeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_cache_user_proto_rawDesc,
			NumEnums:      1,
			NumMessages:   6,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_cache_user_proto_goTypes,
		DependencyIndexes: file_cache_user_proto_depIdxs,
		EnumInfos:         file_cache_user_proto_enumTypes,
		MessageInfos:      file_cache_user_proto_msgTypes,
	}.Build()
	File_cache_user_proto = out.File
	file_cache_user_proto_rawDesc = nil
	file_cache_user_proto_goTypes = nil
	file_cache_user_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// CacheUserClient is the client API for CacheUser service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type CacheUserClient interface {
	// 缓存单个用户, 禁止多次调用此rpc, 需要cache用户时, 必须使用CacheMultiUser
	CacheSingleUser(ctx context.Context, in *CacheSingleUserRequest, opts ...grpc.CallOption) (*CacheSingleUserResponse, error)
	// 缓存多个单用户
	CacheMultiSingleUser(ctx context.Context, opts ...grpc.CallOption) (CacheUser_CacheMultiSingleUserClient, error)
	// 以年级为关键字缓存用户
	CacheUserByGrade(ctx context.Context, in *CacheUserByGradeRequest, opts ...grpc.CallOption) (*MultiCacheUserResponse, error)
	// 以班级为关键字缓存用户
	CacheUserByClass(ctx context.Context, in *CacheUserByClassRequest, opts ...grpc.CallOption) (*MultiCacheUserResponse, error)
	// 缓存全部用户, 调用此rpc请注意Redis内存占用
	CacheAllUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultiCacheUserResponse, error)
	// 删除全部缓存
	RemoveAllUserCache(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultiCacheUserResponse, error)
}

type cacheUserClient struct {
	cc grpc.ClientConnInterface
}

func NewCacheUserClient(cc grpc.ClientConnInterface) CacheUserClient {
	return &cacheUserClient{cc}
}

func (c *cacheUserClient) CacheSingleUser(ctx context.Context, in *CacheSingleUserRequest, opts ...grpc.CallOption) (*CacheSingleUserResponse, error) {
	out := new(CacheSingleUserResponse)
	err := c.cc.Invoke(ctx, "/api.CacheUser/CacheSingleUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheUserClient) CacheMultiSingleUser(ctx context.Context, opts ...grpc.CallOption) (CacheUser_CacheMultiSingleUserClient, error) {
	stream, err := c.cc.NewStream(ctx, &_CacheUser_serviceDesc.Streams[0], "/api.CacheUser/CacheMultiSingleUser", opts...)
	if err != nil {
		return nil, err
	}
	x := &cacheUserCacheMultiSingleUserClient{stream}
	return x, nil
}

type CacheUser_CacheMultiSingleUserClient interface {
	Send(*CacheSingleUserRequest) error
	Recv() (*CacheMultiSingleUserResponse, error)
	grpc.ClientStream
}

type cacheUserCacheMultiSingleUserClient struct {
	grpc.ClientStream
}

func (x *cacheUserCacheMultiSingleUserClient) Send(m *CacheSingleUserRequest) error {
	return x.ClientStream.SendMsg(m)
}

func (x *cacheUserCacheMultiSingleUserClient) Recv() (*CacheMultiSingleUserResponse, error) {
	m := new(CacheMultiSingleUserResponse)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *cacheUserClient) CacheUserByGrade(ctx context.Context, in *CacheUserByGradeRequest, opts ...grpc.CallOption) (*MultiCacheUserResponse, error) {
	out := new(MultiCacheUserResponse)
	err := c.cc.Invoke(ctx, "/api.CacheUser/CacheUserByGrade", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheUserClient) CacheUserByClass(ctx context.Context, in *CacheUserByClassRequest, opts ...grpc.CallOption) (*MultiCacheUserResponse, error) {
	out := new(MultiCacheUserResponse)
	err := c.cc.Invoke(ctx, "/api.CacheUser/CacheUserByClass", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheUserClient) CacheAllUser(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultiCacheUserResponse, error) {
	out := new(MultiCacheUserResponse)
	err := c.cc.Invoke(ctx, "/api.CacheUser/CacheAllUser", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *cacheUserClient) RemoveAllUserCache(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*MultiCacheUserResponse, error) {
	out := new(MultiCacheUserResponse)
	err := c.cc.Invoke(ctx, "/api.CacheUser/RemoveAllUserCache", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// CacheUserServer is the server API for CacheUser service.
type CacheUserServer interface {
	// 缓存单个用户, 禁止多次调用此rpc, 需要cache用户时, 必须使用CacheMultiUser
	CacheSingleUser(context.Context, *CacheSingleUserRequest) (*CacheSingleUserResponse, error)
	// 缓存多个单用户
	CacheMultiSingleUser(CacheUser_CacheMultiSingleUserServer) error
	// 以年级为关键字缓存用户
	CacheUserByGrade(context.Context, *CacheUserByGradeRequest) (*MultiCacheUserResponse, error)
	// 以班级为关键字缓存用户
	CacheUserByClass(context.Context, *CacheUserByClassRequest) (*MultiCacheUserResponse, error)
	// 缓存全部用户, 调用此rpc请注意Redis内存占用
	CacheAllUser(context.Context, *empty.Empty) (*MultiCacheUserResponse, error)
	// 删除全部缓存
	RemoveAllUserCache(context.Context, *empty.Empty) (*MultiCacheUserResponse, error)
}

// UnimplementedCacheUserServer can be embedded to have forward compatible implementations.
type UnimplementedCacheUserServer struct {
}

func (*UnimplementedCacheUserServer) CacheSingleUser(context.Context, *CacheSingleUserRequest) (*CacheSingleUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheSingleUser not implemented")
}
func (*UnimplementedCacheUserServer) CacheMultiSingleUser(CacheUser_CacheMultiSingleUserServer) error {
	return status.Errorf(codes.Unimplemented, "method CacheMultiSingleUser not implemented")
}
func (*UnimplementedCacheUserServer) CacheUserByGrade(context.Context, *CacheUserByGradeRequest) (*MultiCacheUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheUserByGrade not implemented")
}
func (*UnimplementedCacheUserServer) CacheUserByClass(context.Context, *CacheUserByClassRequest) (*MultiCacheUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheUserByClass not implemented")
}
func (*UnimplementedCacheUserServer) CacheAllUser(context.Context, *empty.Empty) (*MultiCacheUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CacheAllUser not implemented")
}
func (*UnimplementedCacheUserServer) RemoveAllUserCache(context.Context, *empty.Empty) (*MultiCacheUserResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveAllUserCache not implemented")
}

func RegisterCacheUserServer(s *grpc.Server, srv CacheUserServer) {
	s.RegisterService(&_CacheUser_serviceDesc, srv)
}

func _CacheUser_CacheSingleUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheSingleUserRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheUserServer).CacheSingleUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CacheUser/CacheSingleUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheUserServer).CacheSingleUser(ctx, req.(*CacheSingleUserRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheUser_CacheMultiSingleUser_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(CacheUserServer).CacheMultiSingleUser(&cacheUserCacheMultiSingleUserServer{stream})
}

type CacheUser_CacheMultiSingleUserServer interface {
	Send(*CacheMultiSingleUserResponse) error
	Recv() (*CacheSingleUserRequest, error)
	grpc.ServerStream
}

type cacheUserCacheMultiSingleUserServer struct {
	grpc.ServerStream
}

func (x *cacheUserCacheMultiSingleUserServer) Send(m *CacheMultiSingleUserResponse) error {
	return x.ServerStream.SendMsg(m)
}

func (x *cacheUserCacheMultiSingleUserServer) Recv() (*CacheSingleUserRequest, error) {
	m := new(CacheSingleUserRequest)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _CacheUser_CacheUserByGrade_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheUserByGradeRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheUserServer).CacheUserByGrade(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CacheUser/CacheUserByGrade",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheUserServer).CacheUserByGrade(ctx, req.(*CacheUserByGradeRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheUser_CacheUserByClass_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CacheUserByClassRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheUserServer).CacheUserByClass(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CacheUser/CacheUserByClass",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheUserServer).CacheUserByClass(ctx, req.(*CacheUserByClassRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheUser_CacheAllUser_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheUserServer).CacheAllUser(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CacheUser/CacheAllUser",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheUserServer).CacheAllUser(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _CacheUser_RemoveAllUserCache_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(CacheUserServer).RemoveAllUserCache(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/api.CacheUser/RemoveAllUserCache",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(CacheUserServer).RemoveAllUserCache(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

var _CacheUser_serviceDesc = grpc.ServiceDesc{
	ServiceName: "api.CacheUser",
	HandlerType: (*CacheUserServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CacheSingleUser",
			Handler:    _CacheUser_CacheSingleUser_Handler,
		},
		{
			MethodName: "CacheUserByGrade",
			Handler:    _CacheUser_CacheUserByGrade_Handler,
		},
		{
			MethodName: "CacheUserByClass",
			Handler:    _CacheUser_CacheUserByClass_Handler,
		},
		{
			MethodName: "CacheAllUser",
			Handler:    _CacheUser_CacheAllUser_Handler,
		},
		{
			MethodName: "RemoveAllUserCache",
			Handler:    _CacheUser_RemoveAllUserCache_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "CacheMultiSingleUser",
			Handler:       _CacheUser_CacheMultiSingleUser_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "cache_user.proto",
}
